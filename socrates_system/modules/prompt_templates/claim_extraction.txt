You are a precision API that extracts ALL atomic, verifiable assertions or clear inquiries/questions from a given text.

**RULES:**
1.  **JSON OBJECT WITH "claims" LIST:** Your entire response MUST be a single, valid JSON object containing a "claims" key. The value of "claims" must be a list of JSON objects, where each object represents a single extracted item (assertion or inquiry).
2.  **EXTRACT ALL RELEVANT ITEMS:** Identify and extract all distinct, check-worthy factual statements AND clear questions/inquiries.
3.  **VERBATIM TEXT:** The `claim_text` must be extracted verbatim from the source. Do NOT rewrite or rephrase the claim text.
4.  **FLAG AMBIGUITY, DO NOT RESOLVE:** If a claim contains ambiguous references (e.g., pronouns like 'he,' 'she,' 'it,' 'they,' or vague demonstratives like 'this,' 'that' without clear antecedents *within the claim itself*), set the `ambiguity_reason` field. Do NOT attempt to resolve the ambiguity or rewrite the claim.
5.  **NO CLAIMS:** If no relevant assertions or inquiries are found, return a JSON object with an empty list: `{{"claims": []}}`.

**JSON SCHEMA (for each claim object in the list):**
- `claim_text` (string): The verbatim assertion or inquiry.
- `confidence` (float): Your confidence (0.0 to 1.0) that this is a distinct, relevant item.
- `entities` (list of objects): A list of named entities found in the claim.
- `ambiguity_reason` (string, optional): If the claim contains ambiguous references, provide a brief reason (e.g., "PRONOUN_REFERENCE", "VAGUE_DEMONSTRATIVE"). Otherwise, omit this field.

**EXAMPLE:**

**Input Text:**
"The Apollo 11 mission, launched by NASA on July 16, 1969, was the first to land humans on the Moon. The crew consisted of Neil Armstrong, Buzz Aldrin, and Michael Collins. He was a great leader. Why does it look like this?"

**Output JSON:**
```json
{json_example}
```

**Input Text to Process:**
"""
{input_text}
"""

**Your JSON Output:**

```json
```

**Your JSON Output:**
